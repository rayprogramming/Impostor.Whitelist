<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Impostor.Api</name>
    </assembly>
    <members>
        <member name="P:Impostor.Api.Events.EventListenerAttribute.Priority">
            <summary>
                Gets or sets the priority of the event listener.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.EventListenerAttribute.Event">
            <summary>
                Gets or sets the event that the listener is listening to.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.EventListenerAttribute.IgnoreCancelled">
            <summary>
                Gets or sets a value indicating whether the listener will be called regardless of the <see cref="P:Impostor.Api.Events.IEventCancelable.IsCancelled" />.
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.Client.IClientConnectedEvent">
            <summary>
                Called just after a <see cref="T:Impostor.Api.Net.IClient"/> is created and connected.
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.Client.IClientConnectionEvent">
            <summary>
                Called just before a <see cref="T:Impostor.Api.Net.IHazelConnection"/> is registered.
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.IGameCreatedEvent">
            <summary>
                Called whenever a new <see cref="T:Impostor.Api.Games.IGame" /> is created.
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.IGameCreationEvent">
            <summary>
                Called just before a new <see cref="T:Impostor.Api.Games.IGame"/> is created.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.IGameCreationEvent.Client">
            <summary>
                Gets the client that requested creation of the game.
            </summary>
            <remarks>
                Will be null if game creation was requested by a plugin.
            </remarks>
        </member>
        <member name="P:Impostor.Api.Events.IGameCreationEvent.GameCode">
            <summary>
                Gets or sets the desired <see cref="T:Impostor.Api.Games.GameCode"/>.
            </summary>
            <exception cref="T:Impostor.Api.ImpostorException">If the GameCode is invalid or already used in another game.</exception>
        </member>
        <member name="T:Impostor.Api.Events.IGameDestroyedEvent">
            <summary>
                Called whenever a new <see cref="T:Impostor.Api.Games.IGame" /> is destroyed.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.IGameEvent.Game">
            <summary>
                Gets the <see cref="T:Impostor.Api.Games.IGame" /> this event belongs to.
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.IGamePlayerJoiningEvent">
            <summary>
                Called just before a <see cref="T:Impostor.Api.Net.IClientPlayer"/> joins a game.
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.IGameStartedEvent">
            <summary>
                The game is started here and players have been initialized.
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.IGameStartingEvent">
            <summary>
                Called when the game is going to start.
                When this is called, not all players are initialized properly yet.
                If you want to get correct player states, use <see cref="T:Impostor.Api.Events.IGameStartedEvent" />.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Meeting.IMeetingEndedEvent.Exiled">
            <summary>
                Gets the exiled player.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Meeting.IMeetingEndedEvent.IsTie">
            <summary>
                Gets a value indicating whether meeting result is a tie.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerChatEvent.Message">
            <summary>
                Gets the message sent by the player.
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.Player.IPlayerEnterVentEvent">
            <summary>
                Called whenever a player enters a vent.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerEnterVentEvent.Vent">
            <summary>
                Gets the entered vent.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerEvent.ClientPlayer">
            <summary>
                Gets the <see cref="T:Impostor.Api.Net.IClientPlayer" /> that triggered this <see cref="T:Impostor.Api.Events.Player.IPlayerEvent" />.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerEvent.PlayerControl">
            <summary>
                Gets the networked <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" /> that triggered this <see cref="T:Impostor.Api.Events.Player.IPlayerEvent" />.
                This <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" /> belongs to the <see cref="T:Impostor.Api.Net.IClientPlayer" />.
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.Player.IPlayerExileEvent">
            <summary>
                Called whenever a player gets exiled (voted out).
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.Player.IPlayerExitVentEvent">
            <summary>
                Called whenever a player exits a vent.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerExitVentEvent.Vent">
            <summary>
                Gets the exited vent.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerMurderEvent.Victim">
            <summary>
                Gets the player who got murdered.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerSetStartCounterEvent.SecondsLeft">
            <summary>
                Gets the current time of the start counter.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerStartMeetingEvent.Body">
            <summary>
                Gets the player who's body got reported. Is null when the meeting started by Emergency call button.
            </summary>
        </member>
        <member name="T:Impostor.Api.Events.Player.IPlayerVentEvent">
            <summary>
                Called whenever a player moves to another vent.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerVentEvent.NewVent">
            <summary>
                Gets the vent player moved to.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerVotedEvent.VotedFor">
            <summary>
                Gets the player he voted for.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.Player.IPlayerVotedEvent.VoteType">
            <summary>
                Gets the Vote type.
            </summary>
        </member>
        <member name="P:Impostor.Api.Events.IEventCancelable.IsCancelled">
            <summary>
                Gets or sets a value indicating whether the event was cancelled.
            </summary>
        </member>
        <member name="M:Impostor.Api.Events.Managers.IEventManager.RegisterListener``1(``0,System.Func{System.Func{System.Threading.Tasks.Task},System.Threading.Tasks.Task})">
            <summary>
                Register a temporary event listener.
            </summary>
            <param name="listener">Event listener.</param>
            <param name="invoker">Middleware between the events, which can be used to swap to the correct thread dispatcher.</param>
            <returns>Disposable that unregisters the callback from the event manager.</returns>
            <typeparam name="TListener">Type of the event listener.</typeparam>
        </member>
        <member name="M:Impostor.Api.Events.Managers.IEventManager.IsRegistered``1">
            <summary>
                Returns true if an event with the type <typeparamref name="TEvent" /> is registered.
            </summary>
            <returns>True if the <typeparamref name="TEvent" /> is registered.</returns>
            <typeparam name="TEvent">Type of the event.</typeparam>
        </member>
        <member name="M:Impostor.Api.Events.Managers.IEventManager.CallAsync``1(``0)">
            <summary>
                Call all the event listeners for the type <typeparamref name="TEvent" />.
            </summary>
            <param name="event">The event argument.</param>
            <typeparam name="TEvent">Type of the event.</typeparam>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Impostor.Api.Events.MultiDisposable">
            <summary>
                Disposes multiple <see cref="T:System.IDisposable" />.
            </summary>
        </member>
        <member name="M:Impostor.Api.DictionaryExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> wrapper for the dictionary.</summary>
            <param name="dictionary">An <see cref="T:System.Collections.Generic.IDictionary`2" /> to create a <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> from.</param>
            <typeparam name="TKey">The type of the keys of <paramref name="dictionary" />.</typeparam>
            <typeparam name="TValue">The type of the values of <paramref name="dictionary" />.</typeparam>
            <returns>An object that acts as a read-only wrapper around the <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
        </member>
        <member name="T:Impostor.Api.SpanReaderExtensions">
            <summary>
                Priovides a StreamReader-like api throught extensions.
            </summary>
        </member>
        <member name="M:Impostor.Api.SpanReaderExtensions.Advance``1(System.ReadOnlySpan{System.Byte}@)">
            <summary>
                Advances the position of <paramref name="input" /> by the size of <typeparamref name="T" />.
            </summary>
            <typeparam name="T">Type that will be read.</typeparam>
            <param name="input">input "stream"/span.</param>
            <returns>The original input.</returns>
        </member>
        <member name="M:Impostor.Api.Games.GameCode.Equals(Impostor.Api.Games.GameCode)">
            <inheritdoc />
        </member>
        <member name="M:Impostor.Api.Games.GameCode.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Impostor.Api.Games.GameCode.GetHashCode">
            <inheritdoc />
        </member>
        <member name="F:Impostor.Api.Games.GameJoinError.None">
            <summary>
                No error occured while joining the game.
            </summary>
        </member>
        <member name="F:Impostor.Api.Games.GameJoinError.InvalidClient">
            <summary>
                The client is not registered in the client manager.
            </summary>
        </member>
        <member name="F:Impostor.Api.Games.GameJoinError.Banned">
            <summary>
                The client has been banned from the game.
            </summary>
        </member>
        <member name="F:Impostor.Api.Games.GameJoinError.GameFull">
            <summary>
                The game is full.
            </summary>
        </member>
        <member name="F:Impostor.Api.Games.GameJoinError.InvalidLimbo">
            <summary>
                The limbo state of the player is incorrect.
            </summary>
        </member>
        <member name="F:Impostor.Api.Games.GameJoinError.GameStarted">
            <summary>
                The game is already started.
            </summary>
        </member>
        <member name="F:Impostor.Api.Games.GameJoinError.GameDestroyed">
            <summary>
                The game has been destroyed.
            </summary>
        </member>
        <member name="F:Impostor.Api.Games.GameJoinError.ClientOutdated">
            <summary>
                The host has a newer version of the game and the client should update.
            </summary>
        </member>
        <member name="F:Impostor.Api.Games.GameJoinError.ClientTooNew">
            <summary>
                The host has an older version of the game and the client should downgrade.
            </summary>
        </member>
        <member name="F:Impostor.Api.Games.GameJoinError.Custom">
            <summary>
                Custom error by a plugin.
            </summary>
            <remarks>
                A custom message can be set in <see cref="P:Impostor.Api.Games.GameJoinResult.Message" />.
            </remarks>
        </member>
        <member name="P:Impostor.Api.Games.IGame.DisplayName">
            <summary>
                Gets or sets display name on game list.
            </summary>
        </member>
        <member name="M:Impostor.Api.Games.IGame.BanIp(System.Net.IPAddress)">
            <summary>
                Adds an <see cref="T:System.Net.IPAddress" /> to the ban list of this game.
                Prevents all future joins from this <see cref="T:System.Net.IPAddress" />.
                This does not kick the player with that <see cref="T:System.Net.IPAddress" /> from the lobby.
            </summary>
            <param name="ipAddress">
                The <see cref="T:System.Net.IPAddress" /> to ban.
            </param>
        </member>
        <member name="M:Impostor.Api.Games.IGame.SyncSettingsAsync">
            <summary>
                Syncs the internal <see cref="T:Impostor.Api.Innersloth.GameOptions.IGameOptions" /> to all players.
                Necessary to do if you modified it, otherwise it won't be used.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Impostor.Api.Games.IGame.SetPrivacyAsync(System.Boolean)">
            <summary>
                Sets game's privacy.
            </summary>
            <param name="isPublic">Privacy to set.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Impostor.Api.Games.IGame.SendToAllAsync(Impostor.Hazel.Abstractions.IMessageWriter,Impostor.Api.Net.LimboStates)">
            <summary>
                Send the message to all players.
            </summary>
            <param name="writer">Message to send.</param>
            <param name="states">Required limbo state of the player.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Impostor.Api.Games.IGame.SendToAllExceptAsync(Impostor.Hazel.Abstractions.IMessageWriter,System.Int32,Impostor.Api.Net.LimboStates)">
            <summary>
                Send the message to all players except one.
            </summary>
            <param name="writer">Message to send.</param>
            <param name="senderId">The player to exclude from sending the message.</param>
            <param name="states">Required limbo state of the player.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Impostor.Api.Games.IGame.SendToAsync(Impostor.Hazel.Abstractions.IMessageWriter,System.Int32)">
            <summary>
                Send a message to a specific player.
            </summary>
            <param name="writer">Message to send.</param>
            <param name="id">ID of the client.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Impostor.Api.Games.IGame.StartRpc(System.UInt32,Impostor.Api.Net.Inner.RpcCalls,System.Nullable{System.Int32},Impostor.Hazel.Abstractions.MessageType)">
            <summary>
                Creates a MessageWriter with GameData header.
            </summary>
            <remarks>Use with caution, recommended only for advanced developers.</remarks>
            <param name="targetNetId">Net id of the InnerNetObject.</param>
            <param name="callId">Rpc id of the message.</param>
            <param name="targetClientId">Client id of GameDataTo's target.</param>
            <param name="type">Message type of the message.</param>
            <returns>A <see cref="T:Impostor.Hazel.Abstractions.IMessageWriter" /> that you can fill with rpc data and send using <see cref="M:Impostor.Api.Games.IGame.FinishRpcAsync(Impostor.Hazel.Abstractions.IMessageWriter,System.Nullable{System.Int32})"/>.</returns>
        </member>
        <member name="M:Impostor.Api.Games.IGame.FinishRpcAsync(Impostor.Hazel.Abstractions.IMessageWriter,System.Nullable{System.Int32})">
            <summary>
            Finishes rpc message and sends it to the target.
            </summary>
            <param name="writer">Message writer of the rpc.</param>
            <param name="targetClientId">Id of the receiving client.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Impostor.Api.Games.Managers.IGameManager.CreateAsync(Impostor.Api.Innersloth.GameOptions.IGameOptions,Impostor.Api.Innersloth.GameFilterOptions)">
            <summary>
            Creates a new game.
            </summary>
            <param name="options">Game options.</param>
            <param name="filterOptions">Filter options.</param>
            <returns>Created game or null if creation was cancelled by a plugin.</returns>
            <exception cref="T:Impostor.Api.ImpostorException">Thrown when game creation failed.</exception>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.Version">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.GameMode">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.MaxPlayers">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.Keywords">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.Map">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.NumImpostors">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.IsDefaults">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.PlayerSpeedMod">
            <summary>
                Gets or sets the Player speed modifier.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.CrewLightMod">
            <summary>
                Gets or sets the Light modifier for the players that are members of the crew as a multiplier value.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.ImpostorLightMod">
            <summary>
                Gets or sets the Light modifier for the players that are Impostors as a multiplier value.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.NumCommonTasks">
            <summary>
                Gets or sets the number of common tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.NumLongTasks">
            <summary>
                Gets or sets the number of long tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.HideNSeekGameOptions.NumShortTasks">
            <summary>
                Gets or sets the number of short tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.IGameOptions.Version">
            <summary>
                Gets the version.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.IGameOptions.GameMode">
            <summary>
                Gets the currently active gamemode.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.IGameOptions.MaxPlayers">
            <summary>
                Gets or sets the maximum amount of players for this lobby.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.IGameOptions.Keywords">
            <summary>
                Gets or sets the language of the lobby as per <see cref="T:Impostor.Api.Innersloth.GameKeywords" /> enum.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.IGameOptions.Map">
            <summary>
                Gets or sets the Map selected for this lobby.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.IGameOptions.NumImpostors">
            <summary>
                Gets or sets the number of impostors for this lobby.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.IGameOptions.IsDefaults">
            <summary>
                Gets or sets a value indicating whether the GameOptions are the default ones.
            </summary>
        </member>
        <member name="F:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.LatestVersion">
            <summary>
                The latest major version of the game client.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.Version">
            <summary>
                Gets or sets host's version of the game.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.MaxPlayers">
            <summary>
                Gets or sets the maximum amount of players for this lobby.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.Keywords">
            <summary>
                Gets or sets the language of the lobby as per <see cref="T:Impostor.Api.Innersloth.GameKeywords" /> enum.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.Map">
            <summary>
                Gets or sets the Map selected for this lobby.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.PlayerSpeedMod">
            <summary>
                Gets or sets the Player speed modifier.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.CrewLightMod">
            <summary>
                Gets or sets the Light modifier for the players that are members of the crew as a multiplier value.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.ImpostorLightMod">
            <summary>
                Gets or sets the Light modifier for the players that are Impostors as a multiplier value.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.KillCooldown">
            <summary>
                Gets or sets the Impostor cooldown to kill in seconds.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.NumCommonTasks">
            <summary>
                Gets or sets the number of common tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.NumLongTasks">
            <summary>
                Gets or sets the number of long tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.NumShortTasks">
            <summary>
                Gets or sets the number of short tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.NumEmergencyMeetings">
            <summary>
                Gets or sets the maximum amount of emergency meetings each player can call during the game in seconds.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.EmergencyCooldown">
            <summary>
                Gets or sets the cooldown between each time any player can call an emergency meeting in seconds.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.NumImpostors">
            <summary>
                Gets or sets the number of impostors for this lobby.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.GhostsDoTasks">
            <summary>
                Gets or sets a value indicating whether ghosts (dead crew members) can do tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.KillDistance">
            <summary>
                Gets or sets the Kill as per values in <see cref="T:Impostor.Api.Innersloth.KillDistances" />.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.DiscussionTime">
            <summary>
                Gets or sets the time for discussion before voting time in seconds.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.VotingTime">
            <summary>
                Gets or sets the time for voting in seconds.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.ConfirmImpostor">
            <summary>
                Gets or sets a value indicating whether an ejected player is an impostor or not.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.VisualTasks">
            <summary>
                Gets or sets a value indicating whether players are able to see tasks being performed by other players.
            </summary>
            <remarks>
                By being set to true, tasks such as Empty Garbage, Submit Scan, Clear asteroids, Prime shields execution will be visible to other players.
            </remarks>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.AnonymousVotes">
            <summary>
                Gets or sets a value indicating whether the vote is anonymous.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.TaskBarUpdate">
            <summary>
                Gets or sets the task bar update mode as per values in <see cref="T:Impostor.Api.Innersloth.TaskBarUpdate" />.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.RoleOptions">
            <summary>
                Gets or sets role options.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.IsDefaults">
            <summary>
                Gets or sets a value indicating whether the GameOptions are the default ones.
            </summary>
        </member>
        <member name="M:Impostor.Api.Innersloth.GameOptions.LegacyGameOptionsData.Serialize(Impostor.Hazel.Abstractions.IMessageWriter)">
            <summary>
                Serializes this instance of GameOptionsData object to a specified BinaryWriter.
            </summary>
            <param name="writer">The stream to write the message to.</param>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.Version">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.GameMode">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.MaxPlayers">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.Keywords">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.Map">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.NumImpostors">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.IsDefaults">
            <inheritdoc />
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.PlayerSpeedMod">
            <summary>
                Gets or sets the Player speed modifier.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.CrewLightMod">
            <summary>
                Gets or sets the Light modifier for the players that are members of the crew as a multiplier value.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.ImpostorLightMod">
            <summary>
                Gets or sets the Light modifier for the players that are Impostors as a multiplier value.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.KillCooldown">
            <summary>
                Gets or sets the Impostor cooldown to kill in seconds.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.NumCommonTasks">
            <summary>
                Gets or sets the number of common tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.NumLongTasks">
            <summary>
                Gets or sets the number of long tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.NumShortTasks">
            <summary>
                Gets or sets the number of short tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.NumEmergencyMeetings">
            <summary>
                Gets or sets the maximum amount of emergency meetings each player can call during the game in seconds.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.EmergencyCooldown">
            <summary>
                Gets or sets the cooldown between each time any player can call an emergency meeting in seconds.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.GhostsDoTasks">
            <summary>
                Gets or sets a value indicating whether ghosts (dead crew members) can do tasks.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.KillDistance">
            <summary>
                Gets or sets the Kill as per values in <see cref="T:Impostor.Api.Innersloth.KillDistances" />.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.DiscussionTime">
            <summary>
                Gets or sets the time for discussion before voting time in seconds.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.VotingTime">
            <summary>
                Gets or sets the time for voting in seconds.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.ConfirmImpostor">
            <summary>
                Gets or sets a value indicating whether an ejected player is an impostor or not.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.VisualTasks">
            <summary>
                Gets or sets a value indicating whether players are able to see tasks being performed by other players.
            </summary>
            <remarks>
                By being set to true, tasks such as Empty Garbage, Submit Scan, Clear asteroids, Prime shields execution will be visible to other players.
            </remarks>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.AnonymousVotes">
            <summary>
                Gets or sets a value indicating whether the vote is anonymous.
            </summary>
        </member>
        <member name="P:Impostor.Api.Innersloth.GameOptions.NormalGameOptions.TaskBarUpdate">
            <summary>
                Gets or sets the task bar update mode as per values in <see cref="T:Impostor.Api.Innersloth.TaskBarUpdate" />.
            </summary>
        </member>
        <member name="F:Impostor.Api.Innersloth.SystemTypes.Decontamination">
            <remarks>The only decontamination on Mira and bottom decontamination on Polus.</remarks>
        </member>
        <member name="F:Impostor.Api.Innersloth.SystemTypes.Decontamination2">
            <remarks>Top decontamination on Polus.</remarks>
        </member>
        <member name="M:Impostor.Api.Net.Custom.ICustomMessageManager`1.Register(`0)">
            <summary>
                Register a custom message.
            </summary>
            <param name="message"><typeparamref name="T"/> message.</param>
            <returns>Disposable that unregisters the message.</returns>
        </member>
        <member name="T:Impostor.Api.Net.IClient">
            <summary>
                Represents a connected game client.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IClient.Id">
            <summary>
                Gets or sets the unique ID of the client.
            </summary>
            <remarks>
                This ID is generated when the client is registered in the client manager and should not be used
                to store persisted data.
            </remarks>
        </member>
        <member name="P:Impostor.Api.Net.IClient.Name">
            <summary>
                Gets the name that was provided by the player in the client.
            </summary>
            <remarks>
                The name is provided by the player and should not be used to store persisted data.
            </remarks>
        </member>
        <member name="P:Impostor.Api.Net.IClient.Language">
            <summary>
                Gets the language.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IClient.ChatMode">
            <summary>
                Gets the quick chat mode.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IClient.Connection">
            <summary>
                Gets the connection of the client.
            </summary>
            <remarks>
                Null when the client was not registered by the matchmaker.
            </remarks>
        </member>
        <member name="P:Impostor.Api.Net.IClient.Items">
            <summary>
                Gets a key/value collection that can be used to share data between messages.
            </summary>
            <remarks>
                <para>
                    The stored data will not be saved.
                    After the connection has been closed all data will be lost.
                </para>
                <para>
                    Note that the values will not be disposed after the connection has been closed.
                    This has to be implemented by the plugin.
                </para>
            </remarks>
        </member>
        <member name="P:Impostor.Api.Net.IClient.Player">
            <summary>
                Gets the current game data of the <see cref="T:Impostor.Api.Net.IClient" />.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IClient.GameVersion">
            <summary>
            Gets the version of the game the client is using.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IClient.PlatformSpecificData">
            <summary>
            Gets platform specific data of the <see cref="T:Impostor.Api.Net.IClient" />.
            </summary>
        </member>
        <member name="M:Impostor.Api.Net.IClient.DisconnectAsync(Impostor.Api.Innersloth.DisconnectReason,System.String)">
            <summary>
                Disconnect the client with a <see cref="T:Impostor.Api.Innersloth.DisconnectReason" />.
            </summary>
            <param name="reason">
                The message to show to the player.
            </param>
            <param name="message">
                Only used when <paramref name="reason" /> is set to <see cref="F:Impostor.Api.Innersloth.DisconnectReason.Custom" />.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Impostor.Api.Net.IClientPlayer">
            <summary>
                Represents a player in <see cref="T:Impostor.Api.Games.IGame" />.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IClientPlayer.Client">
            <summary>
                Gets the client that belongs to the player.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IClientPlayer.Game">
            <summary>
                Gets the game where the <see cref="T:Impostor.Api.Net.IClientPlayer" /> belongs to.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IClientPlayer.Limbo">
            <summary>
                Gets or sets the current limbo state of the player.
            </summary>
        </member>
        <member name="M:Impostor.Api.Net.IClientPlayer.IsOwner(Impostor.Api.Net.Inner.IInnerNetObject)">
            <summary>
                Checks if the specified <see cref="T:Impostor.Api.Net.Inner.IInnerNetObject" /> is owned by <see cref="T:Impostor.Api.Net.IClientPlayer" />.
            </summary>
            <param name="netObject">The <see cref="T:Impostor.Api.Net.Inner.IInnerNetObject" />.</param>
            <returns>Returns true if owned by <see cref="T:Impostor.Api.Net.IClientPlayer" />.</returns>
        </member>
        <member name="T:Impostor.Api.Net.IHazelConnection">
            <summary>
                Represents the connection of the client.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IHazelConnection.EndPoint">
            <summary>
                Gets the IP endpoint of the client.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IHazelConnection.IsConnected">
            <summary>
                Gets a value indicating whether the client is connected to the server.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IHazelConnection.Client">
            <summary>
                Gets or sets the client of the connection.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.IHazelConnection.AveragePing">
            <summary>
                Gets the average ping of the client.
            </summary>
        </member>
        <member name="M:Impostor.Api.Net.IHazelConnection.SendAsync(Impostor.Hazel.Abstractions.IMessageWriter)">
            <summary>
                Sends a message writer to the connection.
            </summary>
            <param name="writer">The message.</param>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="M:Impostor.Api.Net.IHazelConnection.DisconnectAsync(System.String,Impostor.Hazel.Abstractions.IMessageWriter)">
            <summary>
                Disconnects the client and invokes the disconnect handler.
            </summary>
            <param name="reason">A reason.</param>
            <param name="writer">A message to send with disconnect packet.</param>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="T:Impostor.Api.Net.Inner.IGameNet">
            <summary>
                Holds all data that is serialized over the network through GameData packets.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.Components.IInnerCustomNetworkTransform.Position">
            <summary>
                Gets position where the object thinks it is (not interpolated).
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.Components.IInnerCustomNetworkTransform.Velocity">
            <summary>
                Gets current object's velocity.
            </summary>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.Components.IInnerCustomNetworkTransform.SnapToAsync(System.Numerics.Vector2)">
            <summary>
                Snaps the current to the given position <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
            </summary>
            <param name="position">The target position.</param>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerMeetingHud.IPlayerVoteArea.TargetPlayer">
            <summary>
                Gets the player info of this vote state.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerMeetingHud.IPlayerVoteArea.IsDead">
            <summary>
                Gets a value indicating whether the player is a dead.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerMeetingHud.IPlayerVoteArea.DidReport">
            <summary>
                Gets a value indicating whether the player started this meeting.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerMeetingHud.IPlayerVoteArea.DidVote">
            <summary>
                Gets a value indicating whether the player voted.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerMeetingHud.IPlayerVoteArea.VoteType">
            <summary>
                Gets the vote type.
            </summary>
            <remarks>
                Null when <see cref="P:Impostor.Api.Net.Inner.Objects.IInnerMeetingHud.IPlayerVoteArea.DidVote" /> is false.
            </remarks>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerMeetingHud.IPlayerVoteArea.VotedFor">
            <summary>
                Gets the player voted for.
            </summary>
            <remarks>
                Null when <see cref="P:Impostor.Api.Net.Inner.Objects.IInnerMeetingHud.IPlayerVoteArea.VoteType" /> isn't <see cref="F:Impostor.Api.Events.Player.VoteType.Player"/>.
            </remarks>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerMeetingHud.PlayerStates">
            <summary>
                Gets states of players taking part in this meeting.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerMeetingHud.Reporter">
            <summary>
                Gets the player that started the meeting.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.PlayerId">
            <summary>
                Gets the <see cref="P:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.PlayerId" /> assigned by the client of the host of the game.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.Physics">
            <summary>
                Gets the <see cref="T:Impostor.Api.Net.Inner.Objects.Components.IInnerPlayerPhysics" /> of the <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
                Contains vent logic.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.NetworkTransform">
            <summary>
                Gets the <see cref="T:Impostor.Api.Net.Inner.Objects.Components.IInnerCustomNetworkTransform" /> of the <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
                Contains position data about the player.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.PlayerInfo">
            <summary>
                Gets the <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerInfo" /> of the <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
                Contains metadata about the player.
            </summary>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.SetNameAsync(System.String)">
            <summary>
                Sets the name of the current <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
                Visible to all players.
            </summary>
            <param name="name">A name for the player.</param>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.SetColorAsync(Impostor.Api.Innersloth.Customization.ColorType)">
            <summary>
                Sets the color of the current <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
                Visible to all players.
            </summary>
            <param name="colorType">A color for the player.</param>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.SetHatAsync(System.String)">
            <summary>
                Sets the hat of the current <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
                Visible to all players.
            </summary>
            <param name="hatId">An hat for the player.</param>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.SetPetAsync(System.String)">
            <summary>
                Sets the pet of the current <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
                Visible to all players.
            </summary>
            <param name="petId">A pet for the player.</param>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.SetSkinAsync(System.String)">
            <summary>
                Sets the skin of the current <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
                Visible to all players.
            </summary>
            <param name="skinId">A skin for the player.</param>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.SendChatAsync(System.String)">
            <summary>
                Send a chat message as the current <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
                Visible to all players.
            </summary>
            <param name="text">The message to send.</param>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.SendChatToPlayerAsync(System.String,Impostor.Api.Net.Inner.Objects.IInnerPlayerControl)">
            <summary>
                Send a chat message as the current <see cref="T:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl" />.
                Visible to only the current.
            </summary>
            <param name="text">The message to send.</param>
            <param name="player">
                The player that should receive this chat message.
                When left as null, will send message to self.
            </param>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.MurderPlayerAsync(Impostor.Api.Net.Inner.Objects.IInnerPlayerControl)">
            <summary>
                Murder <paramref name="target" /> player.
            </summary>
            <param name="target">Target player to murder.</param>
            <exception cref="T:Impostor.Api.ImpostorProtocolException">Thrown when player is not the impostor.</exception>
            <exception cref="T:Impostor.Api.ImpostorProtocolException">Thrown when player is dead.</exception>
            <exception cref="T:Impostor.Api.ImpostorProtocolException">Thrown when target is dead.</exception>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.IInnerPlayerControl.ExileAsync">
            <summary>
                Exile the current player. This doesn't produce a body to be reported.
                Visible to all players.
            </summary>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerPlayerInfo.PlayerName">
            <summary>
                Gets the name of the player as decided by the host.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerPlayerInfo.IsImpostor">
            <summary>
                Gets a value indicating whether the player is an impostor.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerPlayerInfo.IsDead">
            <summary>
                Gets a value indicating whether the player is a dead in the current game.
            </summary>
        </member>
        <member name="P:Impostor.Api.Net.Inner.Objects.IInnerPlayerInfo.LastDeathReason">
            <summary>
                Gets the reason why the player is dead in the current game.
            </summary>
        </member>
        <member name="M:Impostor.Api.Net.Inner.Objects.ITaskInfo.CompleteAsync">
            <summary>
                Sets the task as complete.
            </summary>
            <returns>Task that must be awaited.</returns>
        </member>
        <member name="M:Impostor.Api.Unity.Mathf.Clamp(System.Single,System.Single,System.Single)">
            <summary>
                <para>Clamps the given value between the given minimum float and maximum float values.  Returns the given value if it is within the min and max range.</para>
            </summary>
            <param name="value">The floating point value to restrict inside the range defined by the min and max values.</param>
            <param name="min">The minimum floating point value to compare against.</param>
            <param name="max">The maximum floating point value to compare against.</param>
            <returns>
                <para>The float result between the min and max values.</para>
            </returns>
        </member>
        <member name="M:Impostor.Api.Unity.Mathf.Clamp01(System.Single)">
            <summary>
                <para>Clamps value between 0 and 1 and returns value.</para>
            </summary>
            <param name="value">Value.</param>
            <returns>Clamped value.</returns>
        </member>
        <member name="M:Impostor.Api.Unity.Mathf.Lerp(System.Single,System.Single,System.Single)">
            <summary>
                <para>Linearly interpolates between a and b by t.</para>
            </summary>
            <param name="a">The start value.</param>
            <param name="b">The end value.</param>
            <param name="t">The interpolation value between the two floats.</param>
            <returns>
                <para>The interpolated float result between the two float values.</para>
            </returns>
        </member>
    </members>
</doc>
